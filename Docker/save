with pkgs; \n\
    stdenvNoCC.mkDerivation {  \n\
        name = \"openenclave-sdk\";  \n\
        nativeBuildInputs = with pkgs;  [  \n\
        	pkgs.cmake \n\
        	pkgs.llvm_7 \n\
        	pkgs.clang_7 \n\
            pkgs.python3 \n\
            pkgs.doxygen \n\
            pkgs.dpkg \n\
        ];  \n\
        buildInputs = with pkgs;  [ pkgs.openssl ];  \n\
        checkInputs = with pkgs;  [ pkgs.strace pkgs.gdb ];  \n\
        src = fetchFromGitHub { \n\
                      owner = \"openenclave\";\n\
                      repo = \"openenclave\";\n\
                      rev  = REV; \n\
                      sha256 = SHA; \n\
                      fetchSubmodules = true; \n\
                }; \n\
  \n\
        CC = \"clang\";\n\
        CXX = \"clang++\";\n\
        LD = \"ld.lld\";\n\
        CFLAGS=\"-Wno-unused-command-line-argument\";\n\
        CXXFLAGS=\"-Wno-unused-command-line-argument\";\n\
        NIX_ENFORCE_PURITY=0; \n\
        NIX_ENFORCE_NO_NATIVE=0; \n\
        doCheck = false; \n\
        dontStrip = true;\n\
        dontPatchELF = true;\n\
        configurePhase = '' \n\
                chmod -R a+rw \$src \n\
                mkdir -p \$out \n\
                cd \$out \n\
                \$OE_SIM cmake -G \"Unix Makefiles\" \$src -DCMAKE_BUILD_TYPE=RelWithDebInfo  \n\
            ''; \n\
  \n\
        buildPhase = '' \n\
                echo \$OE_SIMULATION \n\
                make VERBOSE=1 -j 4 \n\
            ''; \n\
        checkPhase = '' \n\
                echo \"ctest -E samples\|oegdb-test\|report\" \n\
                # We exclude a few tests that cant work in nix or in a container. \n\
                # We adjust the writability of the directories as the tests require writable directory. \n\
                find ./tests -type d -exec chmod a+w {} \;\n\
                LD_LIBRARY_PATH=/home/azureuser/.nix_libs \$OE_SIM ctest -E samples\|oegdb-test\|report \n\
            ''; \n\
\n\
        installPhase = '' \n\
                cp -r \$out/* /output/build \n\
            ''; \n\
\n\
        fixupPhase = '' \n\
                if [ \$(uname -m) == \"aarch64\" ]\n\
                then \n\
                    LD_INTERPRETER=\"/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1\"\n\
                elif [ \$(uname -m) == \"x86_64\" ]\n\
                then\n\
                    LD_INTERPRETER=\"/lib64/ld-linux-x86-64.so.2\"\n\
                else\n\
                    LD_INTERPRETER=\"UNSUPPORTED ARCHITECTURE\"\n\
                fi\n\
                echo \"FIXUP!!!!!! \$LD_INTERPRETER\"\n\
                cd /output/build\n\
                find /output/build -type f -executable -exec patchelf --set-interpreter \$LD_INTERPRETER {} \;\n\
            ''; \n\
        \n\
        shellHook = '' \n\
                # Shell Hook. We run ctests here and packaging to avoid purity enforcement \n\
                # which causes most of the tests to fail. It also allows us to build the deb package \n\
                # after the fixup rather than before.\n\
\n\
                echo \"ctest -E samples\|oegdb-test\|report\" \n\
                if \$DO_CHECK\n\
                then \n\
                    pushd $out
                    # adjust the writability of the directories as the tests require writable directory. \n\
                    # nix appears to set the directories read only sometimes.\n\
                    find ./tests -type d -exec chmod a+w {} \;\n\
\n\
                    # exclude a few tests that cant work in nix or in a container. \n\
                    LD_LIBRARY_PATH=/home/azureuser/.nix_libs \$OE_SIM ctest -E samples\|oegdb-test\|report \n\
                    CTEST_RESULT=\$?\n\
                    if \$CTEST_RESULT\n\
                    then\n\
                        echo \"ERROR: Ctests failed\"\n\
                        exit \$CTEST_RESULT\n\
                    fi\n\
                    popd
                fi\n\
                if \$DEB_PACKAGE\n\
                then\n\
\n\
                    pushd /output/build
                    chmod -R a+w .
                    # Build the deb package initially\n\
                    cpack -G DEB \n\
                    DPKG_RESULT=\$?\n\
                    if \$DPKG_RESULT\n\
                    then\n\
                        echo \"ERROR: Cpack failed\"\n\
                        exit \$DPKG_RESULT\n\
                    fi\n\
                        \n\
                    pkgname=\$(ls open-enclave*.deb) \n\
                    echo \"Build deb package \" \$pkgname\n\
                    /home/azureuser/sort_deb_sum.sh \$pkgname \n\
                    mv \$pkgname.sorted \$pkgname \n\
                    cp \$pkgname /output\n\
                    popd
                fi\n\
                if \$INTERACTIVE_SHELL\n\
                then\n\
                    echo \"Complete\"\n\
                    exit 0\n\
                fi \n\
            '';  \n\
}  \n\
